{"version":3,"sources":["SidebarChat.js","Sidebar.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["SidebarChat","className","Avatar","Sidebar","IconButton","SearchOutlined","placeholder","type","Chat","messages","useState","input","setInput","map","message","received","name","Date","toUTCString","value","onChange","e","target","onClick","preventDefault","axios","post","timeStamp","App","setMessages","useEffect","get","then","response","data","channel","Pusher","cluster","subscribe","bind","newMessages","unbind_all","unsubscribe","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"iaAiBeA,MAbf,WACE,OACE,yBAAKC,UAAU,eACb,kBAACC,EAAA,EAAD,MACA,yBAAKD,UAAU,oBACb,yCACA,0DC4BOE,MA9Bf,WACE,OACE,yBAAKF,UAAU,WACb,yBAAKA,UAAU,kBACb,kBAACC,EAAA,EAAD,MACA,yBAAKD,UAAU,wBACb,kBAACG,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,SAIN,yBAAKH,UAAU,kBACb,yBAAKA,UAAU,2BACb,kBAACI,EAAA,EAAD,MACA,2BAAOC,YAAY,2BAA2BC,KAAK,WAGvD,yBAAKN,UAAU,iBACb,kBAAC,EAAD,S,4ECqCOO,MA3Df,YAA2B,IAAZC,EAAW,EAAXA,SAAW,EACCC,mBAAS,IADV,mBACjBC,EADiB,KACXC,EADW,KAexB,OACE,yBAAKX,UAAU,QACb,yBAAKA,UAAU,eACb,kBAACC,EAAA,EAAD,MACA,yBAAKD,UAAU,mBACb,yCACA,gDAEF,yBAAKA,UAAU,oBACb,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,OAEF,kBAACD,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,SAIN,yBAAKH,UAAU,aACdQ,EAASI,KAAI,SAACC,GAAD,OACZ,yBAAKb,UAAS,uBAAkBa,EAAQC,UAAY,yBAClD,2BACE,0BAAMd,UAAU,aAAaa,EAAQE,MACpCF,EAAQA,QACT,0BAAMb,UAAU,cAAa,IAAIgB,MAAOC,qBAM9C,yBAAKjB,UAAU,eACb,kBAAC,IAAD,MACA,8BACE,2BAAOkB,MAAOR,EAAOS,SAAU,SAACC,GAAD,OAAOT,EAASS,EAAEC,OAAOH,QAASb,YAAY,iBAAiBC,KAAK,SACnG,4BAAQgB,QAhDK,SAACF,GACnBA,EAAEG,iBAEFC,IAAMC,KAAK,gBAAiB,CAC1BZ,QAAUH,EACVK,KAAM,KACNW,UAAW,WACXZ,UAAW,KAyCsBR,KAAK,UAAnC,mBAEF,kBAAC,IAAD,S,yBClBOqB,MAtCf,WAAgB,IAAD,EACiBlB,mBAAS,IAD1B,mBACRD,EADQ,KACCoB,EADD,KA2Bb,OAxBAC,qBAAU,WACRL,IAAMM,IAAI,iBACTC,MAAK,SAAAC,GACJJ,EAAYI,EAASC,WAEvB,IAEDJ,qBAAU,WACT,IAIMK,EAJS,IAAIC,IAAO,uBAAwB,CAChDC,QAAS,QAGYC,UAAU,YAKjC,OAJAH,EAAQI,KAAK,YAAY,SAACC,GAExBX,EAAY,GAAD,mBAAKpB,GAAL,CAAc+B,QAEpB,WACLL,EAAQM,aACRN,EAAQO,iBAER,CAACjC,IAEJkC,QAAQC,IAAInC,GAEX,yBAAKR,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACCQ,SAAUA,OC3BCoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAM/C,c","file":"static/js/main.9de252d0.chunk.js","sourcesContent":["import { Avatar } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./SidebarChat.css\";\r\n\r\nfunction SidebarChat() {\r\n  return (\r\n    <div className=\"sidebarChat\">\r\n      <Avatar></Avatar>\r\n      <div className=\"sidebarChat_info\">\r\n        <h2>Room name</h2>\r\n        <p>This is the last message</p>\r\n       \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarChat;\r\n","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport { SearchOutlined } from \"@material-ui/icons\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nfunction Sidebar() {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar_header\">\r\n        <Avatar />\r\n        <div className=\"sidebar_header_right\">\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar_Search\">\r\n        <div className=\"sidebar_searchContainer\">\r\n          <SearchOutlined />\r\n          <input placeholder=\"Search or start new chat\" type=\"text\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar_chats\">\r\n        <SidebarChat />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { useState } from \"react\";\r\nimport \"./Chat.css\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\r\nimport { SearchOutlined } from \"@material-ui/icons\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport axios from \"axios\";\r\n\r\nfunction Chat({messages}) {\r\n  const [input,setInput] = useState(\"\");\r\n\r\n   const sendMessage = (e) => {\r\n     e.preventDefault();\r\n      \r\n     axios.post('/messages/new', {\r\n       message : input,\r\n       name: \"ME\",\r\n       timeStamp: \"Justnow!\",\r\n       received : true,\r\n     });\r\n   }\r\n \r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat_header\">\r\n        <Avatar />\r\n        <div className=\"chat_headerInfo\">\r\n          <h3>Room Name</h3>\r\n          <p>Last seen Avatar</p>\r\n        </div>\r\n        <div className=\"chat_headerRight\">\r\n          <IconButton>\r\n            <SearchOutlined />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat_body\">\r\n      {messages.map((message) => (\r\n        <div className={`chat_message ${message.received && \"chat_message_receive\"}`}>\r\n          <p>\r\n            <span className=\"chat_name\">{message.name}</span>\r\n            {message.message}\r\n            <span className=\"chat_time\">{new Date().toUTCString()}</span>\r\n          </p>\r\n        </div>\r\n      ))}\r\n        \r\n      </div>\r\n      <div className=\"chat_footer\">\r\n        <InsertEmoticonIcon />\r\n        <form >\r\n          <input value={input} onChange={(e) => setInput(e.target.value) } placeholder=\"Type a message\" type=\"text\"></input>\r\n          <button onClick={sendMessage} type=\"submit\">Send a message</button>\r\n        </form>\r\n        <MicIcon></MicIcon>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React, {useEffect,useState} from \"react\";\nimport Sidebar from \"./Sidebar.js\";\nimport Chat from \"./Chat.js\";\nimport \"./App.css\";\nimport Pusher from \"pusher-js\"\nimport axios from \"axios\"\n\nfunction App() {\nconst [messages,setMessages]  = useState([]);\n\n  useEffect(() => {\n    axios.get('messages/sync')\n    .then(response => {\n      setMessages(response.data);\n    })\n  },[]);\n\n   useEffect(() => {\n    const pusher = new Pusher('964745683bd9b9136771', {\n      cluster: 'ap2'\n    });\n\n    const channel = pusher.subscribe('messages');\n    channel.bind('inserted', (newMessages) => {\n      // alert(JSON.stringify(newMessages));\n      setMessages([...messages,newMessages])\n    });\n    return () => {\n      channel.unbind_all();\n      channel.unsubscribe();\n    }\n   } ,[messages])\n\n   console.log(messages);\n  return (\n    <div className=\"app\">\n      <div className=\"app_body\">\n        <Sidebar />\n        <Chat\n         messages={messages}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}